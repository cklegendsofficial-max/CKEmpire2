name: CK Empire CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Security and Code Quality
  security:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Bandit security scan
        run: |
          cd backend
          pip install bandit
          bandit -r . -f json -o reports/bandit-report.json || true

      - name: Run Safety dependency check
        run: |
          cd backend
          pip install safety
          safety check --json --output reports/safety-report.json || true

      - name: Run Semgrep security scan
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/owasp-top-ten
          output-format: json
          output-file: reports/semgrep-report.json

  # Backend Tests
  backend-tests:
    runs-on: ubuntu-latest
    needs: security
    strategy:
      matrix:
        python-version: [3.11]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          cd backend
          pip install -r requirements.txt

      - name: Run unit tests
        run: |
          cd backend
          python -m pytest tests/ -m "unit" --cov=. --cov-report=xml --cov-report=html

      - name: Run integration tests
        run: |
          cd backend
          python -m pytest tests/ -m "integration" --cov=. --cov-report=xml

      - name: Run security tests
        run: |
          cd backend
          python -m pytest tests/ -m "security" --cov=. --cov-report=xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage.xml
          flags: backend
          name: backend-coverage

  # Frontend Tests
  frontend-tests:
    runs-on: ubuntu-latest
    needs: security
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: |
          cd frontend
          npm ci

      - name: Run linting
        run: |
          cd frontend
          npm run lint

      - name: Run tests
        run: |
          cd frontend
          npm test -- --coverage --watchAll=false

      - name: Build application
        run: |
          cd frontend
          npm run build

  # Load Testing
  load-tests:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Locust
        run: |
          cd backend
          pip install locust

      - name: Start backend service
        run: |
          cd backend
          python -m uvicorn main:app --host 0.0.0.0 --port 8000 &
          sleep 10

      - name: Run load tests
        run: |
          cd backend
          locust -f tests/load/locustfile.py --headless --users 10 --spawn-rate 2 --run-time 60s --html reports/locust-report.html

  # Build and Push Images
  build-images:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, load-tests]
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and push Backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push Frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Deploy to Development
  deploy-dev:
    runs-on: ubuntu-latest
    needs: build-images
    if: github.ref == 'refs/heads/develop'
    environment: development
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Update kubeconfig
        run: aws eks update-kubeconfig --name ckempire-dev-cluster --region ${{ secrets.AWS_REGION }}

      - name: Install Helm
        uses: azure/setup-helm@v3
        with:
          version: v3.12.0

      - name: Deploy to development
        run: |
          cd deployment/helm
          helm upgrade --install ckempire-dev . \
            --namespace ckempire-dev \
            --create-namespace \
            --set global.environment=development \
            --set backend.replicaCount=1 \
            --set frontend.replicaCount=1 \
            --set postgresql.primary.persistence.size=10Gi \
            --set redis.master.persistence.size=5Gi

      - name: Run smoke tests
        run: |
          kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=ckempire-backend -n ckempire-dev --timeout=300s
          kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=ckempire-frontend -n ckempire-dev --timeout=300s

  # Deploy to Production
  deploy-prod:
    runs-on: ubuntu-latest
    needs: build-images
    if: github.ref == 'refs/heads/main' || github.event_name == 'release'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Update kubeconfig
        run: aws eks update-kubeconfig --name ckempire-prod-cluster --region ${{ secrets.AWS_REGION }}

      - name: Install Helm
        uses: azure/setup-helm@v3
        with:
          version: v3.12.0

      - name: Deploy to production
        run: |
          cd deployment/helm
          helm upgrade --install ckempire . \
            --namespace ckempire \
            --create-namespace \
            --set global.environment=production \
            --set backend.replicaCount=3 \
            --set frontend.replicaCount=2 \
            --set postgresql.primary.persistence.size=50Gi \
            --set redis.master.persistence.size=20Gi

      - name: Run health checks
        run: |
          kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=ckempire-backend -n ckempire --timeout=600s
          kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=ckempire-frontend -n ckempire --timeout=600s
          
          # Test API health
          kubectl run test-api --image=curlimages/curl --rm -i --restart=Never -- \
            curl -f https://api.ckempire.com/health
          
          # Test frontend
          kubectl run test-frontend --image=curlimages/curl --rm -i --restart=Never -- \
            curl -f https://ckempire.com/

  # Deploy to GKE (Alternative)
  deploy-gke:
    runs-on: ubuntu-latest
    needs: build-images
    if: github.ref == 'refs/heads/main' && github.event_name == 'release'
    environment: production-gke
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Google Cloud CLI
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true

      - name: Configure Docker for GCR
        run: gcloud auth configure-docker

      - name: Get GKE cluster credentials
        run: |
          gcloud container clusters get-credentials ckempire-prod-cluster \
            --zone ${{ secrets.GKE_ZONE }} \
            --project ${{ secrets.GCP_PROJECT_ID }}

      - name: Install Helm
        uses: azure/setup-helm@v3
        with:
          version: v3.12.0

      - name: Deploy to GKE
        run: |
          cd deployment/helm
          helm upgrade --install ckempire-gke . \
            --namespace ckempire \
            --create-namespace \
            --set global.environment=production \
            --set backend.replicaCount=3 \
            --set frontend.replicaCount=2

  # Monitoring Setup
  setup-monitoring:
    runs-on: ubuntu-latest
    needs: [deploy-prod, deploy-gke]
    if: always() && (needs.deploy-prod.result == 'success' || needs.deploy-gke.result == 'success')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Update kubeconfig
        run: aws eks update-kubeconfig --name ckempire-prod-cluster --region ${{ secrets.AWS_REGION }}

      - name: Install Helm
        uses: azure/setup-helm@v3
        with:
          version: v3.12.0

      - name: Deploy monitoring stack
        run: |
          # Add Prometheus Operator
          helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
          helm repo update
          
          helm upgrade --install prometheus prometheus-community/kube-prometheus-stack \
            --namespace monitoring \
            --create-namespace \
            --set grafana.enabled=true \
            --set prometheus.prometheusSpec.retention=30d

      - name: Deploy Grafana dashboards
        run: |
          kubectl apply -f deployment/monitoring/grafana-dashboards/ -n monitoring

      - name: Configure alerts
        run: |
          kubectl apply -f deployment/monitoring/alertmanager/ -n monitoring

  # Notifications
  notify:
    runs-on: ubuntu-latest
    needs: [deploy-prod, deploy-gke, setup-monitoring]
    if: always()
    
    steps:
      - name: Notify Slack on success
        if: needs.deploy-prod.result == 'success' || needs.deploy-gke.result == 'success'
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: 'CK Empire deployment successful! :rocket:'
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify Slack on failure
        if: needs.deploy-prod.result == 'failure' || needs.deploy-gke.result == 'failure'
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: 'CK Empire deployment failed! :x:'
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }} 