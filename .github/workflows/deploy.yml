name: Deploy CKEmpire

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Security scanning
  security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Build and test backend
  test-backend:
    runs-on: ubuntu-latest
    needs: security-scan
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          cd backend
          pip install -r requirements.txt
          pip install pytest pytest-cov bandit safety

      - name: Run security checks
        run: |
          cd backend
          bandit -r . -f json -o bandit-report.json || true
          safety check --json --output safety-report.json || true

      - name: Run tests
        run: |
          cd backend
          pytest --cov=. --cov-report=xml --cov-report=html

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage.xml
          flags: backend
          name: backend-coverage

  # Build and test frontend
  test-frontend:
    runs-on: ubuntu-latest
    needs: security-scan
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: |
          cd frontend
          npm ci

      - name: Run linting
        run: |
          cd frontend
          npm run lint

      - name: Run tests
        run: |
          cd frontend
          npm test -- --coverage --watchAll=false

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./frontend/coverage/lcov.info
          flags: frontend
          name: frontend-coverage

  # Build Docker images
  build-images:
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and push backend image
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push frontend image
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Deploy to development
  deploy-dev:
    runs-on: ubuntu-latest
    needs: build-images
    if: github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'dev')
    environment: development
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      - name: Terraform Init
        run: |
          cd deployment/terraform
          terraform init

      - name: Terraform Plan
        run: |
          cd deployment/terraform
          terraform plan -var="environment=dev" -out=tfplan

      - name: Terraform Apply
        run: |
          cd deployment/terraform
          terraform apply -auto-approve tfplan

      - name: Deploy with Helm
        run: |
          helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
          helm repo add sentry https://sentry-kubernetes.github.io/charts
          helm repo update
          
          # Deploy monitoring stack
          helm upgrade --install prometheus-stack prometheus-community/kube-prometheus-stack \
            --namespace monitoring --create-namespace \
            --values deployment/terraform/values/prometheus-values.yaml
          
          # Deploy Sentry
          helm upgrade --install sentry sentry/sentry \
            --namespace monitoring \
            --values deployment/sentry/sentry-values.yaml
          
          # Deploy CKEmpire application
          helm upgrade --install ckempire deployment/helm \
            --namespace ckempire --create-namespace \
            --values deployment/terraform/values/ckempire-values.yaml \
            --set backend.image.tag=${{ github.sha }} \
            --set frontend.image.tag=${{ github.sha }}

  # Deploy to staging
  deploy-staging:
    runs-on: ubuntu-latest
    needs: build-images
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      - name: Terraform Init
        run: |
          cd deployment/terraform
          terraform init

      - name: Terraform Plan
        run: |
          cd deployment/terraform
          terraform plan -var="environment=staging" -out=tfplan

      - name: Terraform Apply
        run: |
          cd deployment/terraform
          terraform apply -auto-approve tfplan

      - name: Deploy with Helm
        run: |
          helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
          helm repo add sentry https://sentry-kubernetes.github.io/charts
          helm repo update
          
          # Deploy monitoring stack
          helm upgrade --install prometheus-stack prometheus-community/kube-prometheus-stack \
            --namespace monitoring --create-namespace \
            --values deployment/terraform/values/prometheus-values.yaml
          
          # Deploy Sentry
          helm upgrade --install sentry sentry/sentry \
            --namespace monitoring \
            --values deployment/sentry/sentry-values.yaml
          
          # Deploy CKEmpire application
          helm upgrade --install ckempire deployment/helm \
            --namespace ckempire --create-namespace \
            --values deployment/terraform/values/ckempire-values.yaml \
            --set backend.image.tag=${{ github.sha }} \
            --set frontend.image.tag=${{ github.sha }}

  # Deploy to production
  deploy-prod:
    runs-on: ubuntu-latest
    needs: build-images
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'prod'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      - name: Terraform Init
        run: |
          cd deployment/terraform
          terraform init

      - name: Terraform Plan
        run: |
          cd deployment/terraform
          terraform plan -var="environment=prod" -out=tfplan

      - name: Terraform Apply
        run: |
          cd deployment/terraform
          terraform apply -auto-approve tfplan

      - name: Deploy with Helm
        run: |
          helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
          helm repo add sentry https://sentry-kubernetes.github.io/charts
          helm repo update
          
          # Deploy monitoring stack
          helm upgrade --install prometheus-stack prometheus-community/kube-prometheus-stack \
            --namespace monitoring --create-namespace \
            --values deployment/terraform/values/prometheus-values.yaml
          
          # Deploy Sentry
          helm upgrade --install sentry sentry/sentry \
            --namespace monitoring \
            --values deployment/sentry/sentry-values.yaml
          
          # Deploy CKEmpire application
          helm upgrade --install ckempire deployment/helm \
            --namespace ckempire --create-namespace \
            --values deployment/terraform/values/ckempire-values.yaml \
            --set backend.image.tag=${{ github.sha }} \
            --set frontend.image.tag=${{ github.sha }}

  # Health checks
  health-check:
    runs-on: ubuntu-latest
    needs: [deploy-dev, deploy-staging, deploy-prod]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Update kubeconfig
        run: aws eks update-kubeconfig --name ckempire-${{ github.event.inputs.environment || 'dev' }} --region us-west-2

      - name: Wait for deployment
        run: |
          kubectl wait --for=condition=available --timeout=300s deployment/ckempire-backend -n ckempire
          kubectl wait --for=condition=available --timeout=300s deployment/ckempire-frontend -n ckempire

      - name: Run health checks
        run: |
          # Get the service URLs
          BACKEND_URL=$(kubectl get svc ckempire-backend -n ckempire -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
          FRONTEND_URL=$(kubectl get svc ckempire-frontend -n ckempire -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
          
          # Health check backend
          curl -f http://$BACKEND_URL:8000/health || exit 1
          
          # Health check frontend
          curl -f http://$FRONTEND_URL:80/ || exit 1
          
          echo "✅ All health checks passed!"

      - name: Notify deployment status
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
          text: |
            Deployment to ${{ github.event.inputs.environment || 'dev' }} ${{ job.status }}
            Commit: ${{ github.sha }}
            Branch: ${{ github.ref }}

  # Rollback on failure
  rollback:
    runs-on: ubuntu-latest
    needs: [deploy-dev, deploy-staging, deploy-prod, health-check]
    if: failure()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Update kubeconfig
        run: aws eks update-kubeconfig --name ckempire-${{ github.event.inputs.environment || 'dev' }} --region us-west-2

      - name: Rollback deployment
        run: |
          # Rollback to previous version
          helm rollback ckempire -n ckempire
          
          echo "🔄 Deployment rolled back due to health check failure"

      - name: Notify rollback
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#alerts'
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
          text: |
            🚨 Deployment failed and rolled back
            Environment: ${{ github.event.inputs.environment || 'dev' }}
            Commit: ${{ github.sha }}
            Branch: ${{ github.ref }} 