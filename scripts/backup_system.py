#!/usr/bin/env python3
"""
CKEmpire System Backup Script
T√ºm sistemi yedekler ve kaydeder
"""

import os
import sys
import shutil
import json
import zipfile
from datetime import datetime
import subprocess

class SystemBackup:
    def __init__(self):
        self.base_dir = os.path.dirname(os.path.dirname(__file__))
        self.backup_dir = os.path.join(self.base_dir, 'backups')
        self.timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        self.backup_name = f"ckempire_backup_{self.timestamp}"
        self.backup_path = os.path.join(self.backup_dir, self.backup_name)
        
    def log(self, message, level="INFO"):
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        print(f"[{timestamp}] {level}: {message}")
        
    def create_backup_directory(self):
        """Backup dizinini olu≈ütur"""
        if not os.path.exists(self.backup_dir):
            os.makedirs(self.backup_dir)
            self.log(f"Backup dizini olu≈üturuldu: {self.backup_dir}")
            
    def get_system_info(self):
        """Sistem bilgilerini topla"""
        system_info = {
            "backup_timestamp": datetime.now().isoformat(),
            "system_version": "CKEmpire v1.0.0",
            "python_version": sys.version,
            "platform": sys.platform,
            "total_files": 0,
            "total_directories": 0,
            "modules": {
                "finance": "‚úÖ Implemented",
                "analytics": "‚úÖ Implemented", 
                "deployment": "‚úÖ Implemented",
                "security": "‚úÖ Implemented",
                "ai": "‚úÖ Implemented",
                "ethics": "‚úÖ Implemented",
                "monitoring": "‚úÖ Implemented"
            }
        }
        
        # Dosya ve dizin sayƒ±sƒ±nƒ± hesapla
        for root, dirs, files in os.walk(self.base_dir):
            system_info["total_directories"] += len(dirs)
            system_info["total_files"] += len(files)
            
        return system_info
        
    def backup_core_modules(self):
        """Ana mod√ºlleri yedekle"""
        core_modules = [
            'backend',
            'frontend', 
            'deployment',
            'scripts',
            'docs',
            'tests',
            'mobile',
            'CKEmpireMobile'
        ]
        
        for module in core_modules:
            module_path = os.path.join(self.base_dir, module)
            if os.path.exists(module_path):
                dest_path = os.path.join(self.backup_path, module)
                shutil.copytree(module_path, dest_path)
                self.log(f"‚úÖ {module} mod√ºl√º yedeklendi")
            else:
                self.log(f"‚ö†Ô∏è  {module} mod√ºl√º bulunamadƒ±", "WARNING")
                
    def backup_configuration_files(self):
        """Konfig√ºrasyon dosyalarƒ±nƒ± yedekle"""
        config_files = [
            'docker-compose.yml',
            'README.md',
            'ckempire.env',
            'codecov.yml',
            '.pre-commit-config.yaml',
            '.gitignore'
        ]
        
        for file in config_files:
            file_path = os.path.join(self.base_dir, file)
            if os.path.exists(file_path):
                dest_path = os.path.join(self.backup_path, file)
                shutil.copy2(file_path, dest_path)
                self.log(f"‚úÖ {file} yedeklendi")
            else:
                self.log(f"‚ö†Ô∏è  {file} bulunamadƒ±", "WARNING")
                
    def backup_test_results(self):
        """Test sonu√ßlarƒ±nƒ± yedekle"""
        test_results_dir = os.path.join(self.backup_path, 'test_results')
        os.makedirs(test_results_dir, exist_ok=True)
        
        # Test sonu√ß dosyalarƒ±nƒ± bul ve kopyala
        for file in os.listdir(self.base_dir):
            if file.endswith('.json') and 'test' in file.lower():
                src_path = os.path.join(self.base_dir, file)
                dest_path = os.path.join(test_results_dir, file)
                shutil.copy2(src_path, dest_path)
                self.log(f"‚úÖ Test sonucu yedeklendi: {file}")
                
    def backup_summary_files(self):
        """√ñzet dosyalarƒ±nƒ± yedekle"""
        summary_files = [
            'DEPLOYMENT_SUMMARY.md',
            'AI_MODULE_SUMMARY.md',
            'ETHICS_MODULE_SUMMARY.md',
            'SECURITY_ENHANCEMENT_SUMMARY.md',
            'MONITORING_SUMMARY.md'
        ]
        
        summaries_dir = os.path.join(self.backup_path, 'summaries')
        os.makedirs(summaries_dir, exist_ok=True)
        
        for file in summary_files:
            file_path = os.path.join(self.base_dir, file)
            if os.path.exists(file_path):
                dest_path = os.path.join(summaries_dir, file)
                shutil.copy2(file_path, dest_path)
                self.log(f"‚úÖ √ñzet dosyasƒ± yedeklendi: {file}")
            else:
                self.log(f"‚ö†Ô∏è  {file} bulunamadƒ±", "WARNING")
                
    def create_backup_manifest(self):
        """Backup manifest dosyasƒ± olu≈ütur"""
        manifest = {
            "backup_info": self.get_system_info(),
            "backup_structure": {},
            "file_count": 0,
            "total_size": 0
        }
        
        # Backup yapƒ±sƒ±nƒ± analiz et
        for root, dirs, files in os.walk(self.backup_path):
            relative_path = os.path.relpath(root, self.backup_path)
            manifest["backup_structure"][relative_path] = {
                "files": files,
                "directories": dirs,
                "file_count": len(files)
            }
            manifest["file_count"] += len(files)
            
        # Toplam boyutu hesapla
        total_size = 0
        for root, dirs, files in os.walk(self.backup_path):
            for file in files:
                file_path = os.path.join(root, file)
                total_size += os.path.getsize(file_path)
        manifest["total_size"] = total_size
        
        # Manifest dosyasƒ±nƒ± kaydet
        manifest_path = os.path.join(self.backup_path, 'backup_manifest.json')
        with open(manifest_path, 'w', encoding='utf-8') as f:
            json.dump(manifest, f, indent=2, ensure_ascii=False)
            
        self.log(f"‚úÖ Backup manifest olu≈üturuldu: {manifest_path}")
        return manifest
        
    def create_zip_backup(self):
        """Backup'ƒ± ZIP dosyasƒ± olarak sƒ±kƒ±≈ütƒ±r"""
        zip_path = f"{self.backup_path}.zip"
        
        with zipfile.ZipFile(zip_path, 'w', zipfile.ZIP_DEFLATED) as zipf:
            for root, dirs, files in os.walk(self.backup_path):
                for file in files:
                    file_path = os.path.join(root, file)
                    arcname = os.path.relpath(file_path, self.backup_path)
                    zipf.write(file_path, arcname)
                    
        self.log(f"‚úÖ ZIP backup olu≈üturuldu: {zip_path}")
        return zip_path
        
    def cleanup_backup_directory(self):
        """Ge√ßici backup dizinini temizle"""
        if os.path.exists(self.backup_path):
            shutil.rmtree(self.backup_path)
            self.log("‚úÖ Ge√ßici backup dizini temizlendi")
            
    def create_restore_script(self):
        """Geri y√ºkleme scripti olu≈ütur"""
        restore_script = f"""#!/usr/bin/env python3
\"\"\"
CKEmpire System Restore Script
Backup'tan sistemi geri y√ºkler
\"\"\"

import os
import sys
import zipfile
import shutil
from datetime import datetime

def restore_system(backup_zip_path):
    \"\"\"Sistemi backup'tan geri y√ºkle\"\"\"
    
    if not os.path.exists(backup_zip_path):
        print(f"‚ùå Backup dosyasƒ± bulunamadƒ±: {{backup_zip_path}}")
        return False
        
    # Ge√ßici dizin olu≈ütur
    temp_dir = f"restore_temp_{{datetime.now().strftime('%Y%m%d_%H%M%S')}}"
    os.makedirs(temp_dir, exist_ok=True)
    
    try:
        # ZIP'i a√ß
        with zipfile.ZipFile(backup_zip_path, 'r') as zipf:
            zipf.extractall(temp_dir)
            
        # Backup manifest'ini oku
        manifest_path = os.path.join(temp_dir, 'backup_manifest.json')
        if os.path.exists(manifest_path):
            import json
            with open(manifest_path, 'r', encoding='utf-8') as f:
                manifest = json.load(f)
            print(f"üìã Backup bilgileri: {{manifest['backup_info']['system_version']}}")
            
        # Dosyalarƒ± geri y√ºkle
        for root, dirs, files in os.walk(temp_dir):
            for file in files:
                if file != 'backup_manifest.json':
                    src_path = os.path.join(root, file)
                    rel_path = os.path.relpath(src_path, temp_dir)
                    dest_path = os.path.join('.', rel_path)
                    
                    # Dizini olu≈ütur
                    os.makedirs(os.path.dirname(dest_path), exist_ok=True)
                    
                    # Dosyayƒ± kopyala
                    shutil.copy2(src_path, dest_path)
                    print(f"‚úÖ Geri y√ºklendi: {{rel_path}}")
                    
        print("üéâ Sistem ba≈üarƒ±yla geri y√ºklendi!")
        return True
        
    except Exception as e:
        print(f"‚ùå Geri y√ºkleme hatasƒ±: {{e}}")
        return False
    finally:
        # Ge√ßici dizini temizle
        if os.path.exists(temp_dir):
            shutil.rmtree(temp_dir)

if __name__ == "__main__":
    if len(sys.argv) != 2:
        print("Kullanƒ±m: python restore_system.py <backup_zip_path>")
        sys.exit(1)
        
    backup_zip_path = sys.argv[1]
    success = restore_system(backup_zip_path)
    sys.exit(0 if success else 1)
"""
        
        restore_script_path = os.path.join(self.backup_dir, 'restore_system.py')
        with open(restore_script_path, 'w', encoding='utf-8') as f:
            f.write(restore_script)
            
        # Script'i √ßalƒ±≈ütƒ±rƒ±labilir yap
        os.chmod(restore_script_path, 0o755)
        self.log(f"‚úÖ Geri y√ºkleme scripti olu≈üturuldu: {restore_script_path}")
        
    def run_comprehensive_backup(self):
        """Kapsamlƒ± backup i≈ülemini √ßalƒ±≈ütƒ±r"""
        print("üöÄ CKEmpire Sistem Backup Ba≈ülatƒ±lƒ±yor...")
        print("=" * 60)
        
        try:
            # 1. Backup dizinini olu≈ütur
            self.create_backup_directory()
            
            # 2. Ana backup dizinini olu≈ütur
            os.makedirs(self.backup_path, exist_ok=True)
            self.log(f"Backup dizini olu≈üturuldu: {self.backup_path}")
            
            # 3. Ana mod√ºlleri yedekle
            self.log("üì¶ Ana mod√ºller yedekleniyor...")
            self.backup_core_modules()
            
            # 4. Konfig√ºrasyon dosyalarƒ±nƒ± yedekle
            self.log("‚öôÔ∏è  Konfig√ºrasyon dosyalarƒ± yedekleniyor...")
            self.backup_configuration_files()
            
            # 5. Test sonu√ßlarƒ±nƒ± yedekle
            self.log("üß™ Test sonu√ßlarƒ± yedekleniyor...")
            self.backup_test_results()
            
            # 6. √ñzet dosyalarƒ±nƒ± yedekle
            self.log("üìã √ñzet dosyalarƒ± yedekleniyor...")
            self.backup_summary_files()
            
            # 7. Backup manifest olu≈ütur
            self.log("üìÑ Backup manifest olu≈üturuluyor...")
            manifest = self.create_backup_manifest()
            
            # 8. ZIP backup olu≈ütur
            self.log("üóúÔ∏è  ZIP backup olu≈üturuluyor...")
            zip_path = self.create_zip_backup()
            
            # 9. Geri y√ºkleme scripti olu≈ütur
            self.log("üîß Geri y√ºkleme scripti olu≈üturuluyor...")
            self.create_restore_script()
            
            # 10. Ge√ßici dizini temizle
            self.cleanup_backup_directory()
            
            # Sonu√ßlarƒ± raporla
            print("\n" + "=" * 60)
            print("üìä BACKUP TAMAMLANDI")
            print("=" * 60)
            print(f"‚úÖ Backup ZIP: {zip_path}")
            print(f"üìÅ Dosya sayƒ±sƒ±: {manifest['file_count']}")
            print(f"üíæ Toplam boyut: {manifest['total_size'] / (1024*1024):.2f} MB")
            print(f"üìÖ Tarih: {manifest['backup_info']['backup_timestamp']}")
            print(f"üêç Python: {manifest['backup_info']['python_version']}")
            
            print("\nüìã Yedeklenen Mod√ºller:")
            for module, status in manifest['backup_info']['modules'].items():
                print(f"  ‚Ä¢ {module}: {status}")
                
            print(f"\nüîß Geri y√ºkleme i√ßin: python backups/restore_system.py {zip_path}")
            
            return True
            
        except Exception as e:
            self.log(f"‚ùå Backup hatasƒ±: {e}", "ERROR")
            return False

def main():
    """Ana fonksiyon"""
    backup = SystemBackup()
    success = backup.run_comprehensive_backup()
    sys.exit(0 if success else 1)

if __name__ == "__main__":
    main() 