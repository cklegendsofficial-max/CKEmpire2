version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: ckempire-postgres
    environment:
      POSTGRES_DB: ckempire
      POSTGRES_USER: ckempire_user
      POSTGRES_PASSWORD: ckempire_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - ckempire-network
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: ckempire-redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - ckempire-network
    restart: unless-stopped

  # Backend API
  backend:
    build:
      context: ../backend
      dockerfile: Dockerfile
    container_name: ckempire-backend
    environment:
      - DATABASE_URL=postgresql://ckempire_user:ckempire_password@postgres:5432/ckempire
      - REDIS_URL=redis://redis:6379
      - SECRET_KEY=your-secret-key-here
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ENVIRONMENT=production
    ports:
      - "8000:8000"
    volumes:
      - ../backend:/app
      - /app/__pycache__
    depends_on:
      - postgres
      - redis
    networks:
      - ckempire-network
    restart: unless-stopped
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload

  # Frontend React App
  frontend:
    build:
      context: ../frontend
      dockerfile: Dockerfile
    container_name: ckempire-frontend
    environment:
      - REACT_APP_API_URL=http://localhost:8000
      - REACT_APP_ENVIRONMENT=production
    ports:
      - "3000:3000"
    volumes:
      - ../frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - ckempire-network
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: ckempire-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - backend
      - frontend
    networks:
      - ckempire-network
    restart: unless-stopped

  # Celery Worker for Background Tasks
  celery-worker:
    build:
      context: ../backend
      dockerfile: Dockerfile
    container_name: ckempire-celery-worker
    environment:
      - DATABASE_URL=postgresql://ckempire_user:ckempire_password@postgres:5432/ckempire
      - REDIS_URL=redis://redis:6379
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    volumes:
      - ../backend:/app
    depends_on:
      - postgres
      - redis
    networks:
      - ckempire-network
    restart: unless-stopped
    command: celery -A app.celery worker --loglevel=info

  # Celery Beat for Scheduled Tasks
  celery-beat:
    build:
      context: ../backend
      dockerfile: Dockerfile
    container_name: ckempire-celery-beat
    environment:
      - DATABASE_URL=postgresql://ckempire_user:ckempire_password@postgres:5432/ckempire
      - REDIS_URL=redis://redis:6379
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    volumes:
      - ../backend:/app
    depends_on:
      - postgres
      - redis
    networks:
      - ckempire-network
    restart: unless-stopped
    command: celery -A app.celery beat --loglevel=info

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: ckempire-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - ckempire-network
    restart: unless-stopped

  # Grafana for Visualization
  grafana:
    image: grafana/grafana:latest
    container_name: ckempire-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    networks:
      - ckempire-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  ckempire-network:
    driver: bridge 